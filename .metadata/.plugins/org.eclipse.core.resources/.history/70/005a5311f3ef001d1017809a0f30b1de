package com.ccsw.tutorial.lending;

import java.util.stream.Collectors;

import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.ccsw.tutorial.lending.model.Lending;
import com.ccsw.tutorial.lending.model.LendingDto;
import com.ccsw.tutorial.lending.model.LendingSearchDto;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

@Tag(name = "Lending", description = "API of Lending")
@CrossOrigin(origins = "*")
@RequestMapping(value = "/lending")
@RestController
public class LendingController {

    @Autowired
    LendingService lendingService;

    @Autowired
    DozerBeanMapper mapper;

    // METODO PARA QUE EL LISTADO DE LOS PRESTAMOS SEA PAGINADO
    @Operation(summary = "Find Page", description = "Method that return a page of Lendings")
    @RequestMapping(value = "", method = RequestMethod.POST)
    public Page<LendingDto> findPage(@RequestBody LendingSearchDto dto) {

        Page<Lending> page = this.lendingService.findPage(dto);

        return new PageImpl<>(
                page.getContent().stream().map(e -> mapper.map(e, LendingDto.class)).collect(Collectors.toList()),
                page.getPageable(), page.getTotalElements());
    }

    // METODO PARA GUARDAR UN PRÉSTAMO NUEVO
    @Operation(summary = "Save", description = "Method that saves a Lending")
    @RequestMapping(path = "", method = RequestMethod.PUT)
    public void save(@RequestBody LendingDto dto) throws Exception {

        this.lendingService.save(dto);
    }

    // METODO PARA BORRAR UN PRÉSTAMO
    @Operation(summary = "Delete", description = "Method that deletes a Lending")
    @RequestMapping(path = "/{id}", method = RequestMethod.DELETE)
    public void delete(@PathVariable("id") Long id) throws Exception {

        this.lendingService.delete(id);
    }

    /*
     * // METODO PARA EL SELECT CON TODOS LOS JUEGOS
     * 
     * @Operation(summary = "Find Games", description =
     * "Method that returns a filtered list of Games")
     * 
     * @RequestMapping(path = "", method = RequestMethod.GET) public List<GameDto>
     * findAllGames(@RequestParam(value = "title", required = false) String title,
     * 
     * @RequestParam(value = "id", required = false) Long idCategory) {
     * 
     * List<Game> games = gameService.find(title, idCategory);
     * 
     * return games.stream().map(e -> mapper.map(e,
     * GameDto.class)).collect(Collectors.toList()); }
     */

}
